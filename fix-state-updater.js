#!/usr/bin/env node

/**
 * ‰øÆÂ§ç Service Â±ÇÁä∂ÊÄÅÊõ¥Êñ∞ÈóÆÈ¢ò
 * Â∞ÜÂØπË±°Â≠óÈù¢ÈáèÊõ¥Êñ∞Êîπ‰∏∫ StateUpdater ÂáΩÊï∞
 */

import fs from 'fs';

// ÈúÄË¶Å‰øÆÂ§çÁöÑÊñá‰ª∂ÂàóË°®
const filesToFix = [
  'src/services/mod-service/mod-state-manager.ts',
  'src/services/ui-service/index.ts',
  'src/services/plugin-service/plugin-service.ts'
];

/**
 * ‰øÆÂ§çÂçï‰∏™Êñá‰ª∂ÁöÑÁä∂ÊÄÅÊõ¥Êñ∞ÈóÆÈ¢ò
 */
function fixFileStateUpdates(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // ÂåπÈÖç updateState Ë∞ÉÁî®Ôºå‰º†ÈÄíÂØπË±°Â≠óÈù¢ÈáèÁöÑÊÉÖÂÜµ
    const updateStateRegex = /this\.stateStore\.updateState\(\{\s*([^}]+)\s*\}\)/g;
    
    const newContent = content.replace(updateStateRegex, (match, objectContent) => {
      // Ëß£ÊûêÂØπË±°ÂÜÖÂÆπ
      const properties = objectContent.split(',').map(prop => prop.trim());
      
      // ÁîüÊàê StateUpdater ÂáΩÊï∞
      const updaterFunction = `(currentState) => ({
        ...currentState,
        ${properties.join(',\n        ')}
      })`;
      
      modified = true;
      return `this.stateStore.updateState(${updaterFunction})`;
    });
    
    if (modified) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`‚úÖ Fixed: ${filePath}`);
      return true;
    } else {
      console.log(`‚è≠Ô∏è  No changes needed: ${filePath}`);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå Error fixing ${filePath}:`, error.message);
    return false;
  }
}

/**
 * ÊµãËØï‰øÆÂ§çÊïàÊûú
 */
function testFix() {
  console.log('üß™ Testing state updater fix...');
  
  const testFiles = filesToFix.slice(0, 1); // Âè™ÊµãËØïÁ¨¨‰∏Ä‰∏™Êñá‰ª∂
  let successCount = 0;
  
  testFiles.forEach(file => {
    if (fs.existsSync(file)) {
      const success = fixFileStateUpdates(file);
      if (success) successCount++;
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${file}`);
    }
  });
  
  console.log(`\nüìä Test results: ${successCount}/${testFiles.length} files fixed`);
  return successCount > 0;
}

/**
 * Â∫îÁî®‰øÆÂ§çÂà∞ÊâÄÊúâÊñá‰ª∂
 */
function applyFixToAllFiles() {
  console.log('üöÄ Applying state updater fix to all files...');
  
  let totalFixed = 0;
  let totalFiles = 0;
  
  filesToFix.forEach(file => {
    if (fs.existsSync(file)) {
      totalFiles++;
      const success = fixFileStateUpdates(file);
      if (success) totalFixed++;
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${file}`);
    }
  });
  
  console.log(`\nüìä Final results: ${totalFixed}/${totalFiles} files fixed`);
}

// ‰∏ªÊâßË°åÈÄªËæë
function main() {
  console.log('üîß State Updater Fixer');
  console.log('======================\n');
  
  const args = process.argv.slice(2);
  
  if (args.includes('--test')) {
    testFix();
  } else if (args.includes('--apply')) {
    applyFixToAllFiles();
  } else {
    const testSuccess = testFix();
    
    if (testSuccess) {
      console.log('\n‚úÖ Test successful! Ready to apply to all files.');
      console.log('Run with --apply to fix all files.');
    } else {
      console.log('\n‚ùå Test failed. Please check the issues before applying to all files.');
    }
  }
}

main();
