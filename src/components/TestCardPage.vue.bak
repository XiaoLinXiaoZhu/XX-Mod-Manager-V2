<template>
  <div class="card-container" ref="containerRef">
    <div 
      v-for="(game, index) in games" 
      :key="game.id"
      class="card"
      :class="{ 'dragging': draggingIndex === index }"
      :style="getCardStyle(index)"
      @mousedown="startDrag($event, index)"
      ref="cardRefs"
    >
      <img :src="game.cover" :alt="game.name" class="card-image">
      <div class="card-title">{{ game.name }}</div>
    </div>
    <div 
      class="insertion-indicator"
      v-show="showInsertionIndicator"
      :style="insertionIndicatorStyle"
    ></div>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted, onBeforeUnmount, computed } from 'vue';

// 定义游戏类型接口
interface Game {
  id: string;
  name: string;
  cover: string;
}

// 游戏数据
const games = ref<Game[]>([
  { id: 'card1', name: 'card1', cover: 'https://placeholder.im/200x300/card1/cccccc/000000' },
  { id: 'card2', name: 'card2', cover: 'https://placeholder.im/200x300/card2/cccccc/000000' },
  { id: 'card3', name: 'card3', cover: 'https://placeholder.im/200x300/card3/cccccc/000000' },
  { id: 'card4', name: 'card4', cover: 'https://placeholder.im/200x300/card4/cccccc/000000' },
  { id: 'card5', name: 'card5', cover: 'https://placeholder.im/200x300/card5/cccccc/000000' },
  { id: 'card6', name: 'card6', cover: 'https://placeholder.im/200x300/card6/cccccc/000000' },
  { id: 'card7', name: 'card7', cover: 'https://placeholder.im/200x300/card7/cccccc/000000' },
  { id: 'card8', name: 'card8', cover: 'https://placeholder.im/200x300/card8/cccccc/000000' }
]);

// 卡片尺寸和间距
const CARD_WIDTH = 200;
const CARD_HEIGHT = 300;
const CARD_MARGIN = 20;
const CARD_SCALE_WHEN_DRAGGING = 1.05;

// 动画参数配置
const DRAG_EASING = 0.15; // 拖拽时的缓动系数
const REARRANGE_EASING = 0.08; // 重排时的缓动系数
const ROTATION_EASING = 0.12; // 旋转的缓动系数
const MAX_DRAG_ROTATION = 25; // 拖拽时的最大旋转角度
const MAX_REARRANGE_ROTATION = 20; // 重排时的最大旋转角度

// DOM引用
const containerRef = ref<HTMLElement | null>(null);
const cardRefs = ref<HTMLElement[]>([]);

// 拖拽状态
const isDragging = ref(false);
const draggingIndex = ref(-1);
const dragStartX = ref(0);
const dragStartY = ref(0);
const dragOffsetX = ref(0);
const dragOffsetY = ref(0);
const cardPositions = reactive<{ x: number, y: number }[]>([]);

// 动态拖拽相关状态
const animationFrameId = ref<number | null>(null);
const targetOffsetX = ref(0);
const targetOffsetY = ref(0);
const currentRotation = ref(0);
const lastMouseX = ref(0);
const lastMouseY = ref(0);
const mouseVelocityX = ref(0);
const mouseVelocityY = ref(0);

// 卡片排序后动画相关状态
const isRearranging = ref(false); // 标记是否正在重新排列
const cardRotations = reactive<number[]>([]); // 每张卡片的当前旋转角度
const cardTargetPositions = reactive<{ x: number, y: number }[]>([]); // 卡片目标位置
const rearrangeAnimationId = ref<number | null>(null); // 重排动画帧ID

// 插入指示器状态
const showInsertionIndicator = ref(false);
const insertionIndex = ref(-1);
const insertionIndicatorStyle = computed(() => {
  if (insertionIndex.value < 0) return {};
  const x = insertionIndex.value * (CARD_WIDTH + CARD_MARGIN);
  return {
    left: `${x - 2}px`,
    height: `${CARD_HEIGHT}px`,
    top: '0px',
    position: 'absolute' as const
  };
});

// 计算卡片样式
const getCardStyle = (index: number) => {
  // 如果是被拖拽的卡片
  if (index === draggingIndex.value && isDragging.value) {
    return {
      transform: `translate(${dragOffsetX.value}px, ${dragOffsetY.value}px) rotate(${currentRotation.value}deg) scale(${CARD_SCALE_WHEN_DRAGGING})`,
      zIndex: 10,
      opacity: 0.8,
      position: 'absolute' as const,
      left: `${cardPositions[index]?.x || index * (CARD_WIDTH + CARD_MARGIN)}px`,
      top: '0px',
      width: `${CARD_WIDTH}px`,
      height: `${CARD_HEIGHT}px`,
      transition: 'none'
    };
  }
  
  // 普通卡片
  const position = cardPositions[index] || { 
    x: index * (CARD_WIDTH + CARD_MARGIN), 
    y: 0 
  };
  
  // 计算旋转角度 - 如果正在重排，使用cardRotations中的值，否则为0
  const rotation = isRearranging.value ? cardRotations[index] || 0 : 0;
  
  return {
    transform: `translate(0, 0) scale(1) rotate(${rotation}deg)`,
    transition: isDragging.value || isRearranging.value ? 'none' : 'all 0.3s ease',
    position: 'absolute' as const,
    left: `${position.x}px`,
    top: `${position.y}px`,
    width: `${CARD_WIDTH}px`,
    height: `${CARD_HEIGHT}px`,
    zIndex: 1
  };
};

// 初始化卡片位置和动画相关状态
const initCardPositions = () => {
  // 初始化位置数组
  cardPositions.length = 0;
  cardRotations.length = 0;
  cardTargetPositions.length = 0;
  
  games.value.forEach((_, index) => {
    const x = index * (CARD_WIDTH + CARD_MARGIN);
    // 当前位置
    cardPositions.push({ x, y: 0 });
    // 目标位置（初始与当前位置相同）
    cardTargetPositions.push({ x, y: 0 });
    // 初始旋转角度为0
    cardRotations.push(0);
  });
};

// 鼠标按下开始拖拽
const startDrag = (event: MouseEvent, index: number) => {
  event.preventDefault();
  isDragging.value = true;
  draggingIndex.value = index;
  
  // 记录鼠标开始位置
  dragStartX.value = event.clientX;
  dragStartY.value = event.clientY;
  lastMouseX.value = event.clientX;
  lastMouseY.value = event.clientY;
  
  // 重置偏移量和旋转
  dragOffsetX.value = 0;
  dragOffsetY.value = 0;
  targetOffsetX.value = 0;
  targetOffsetY.value = 0;
  currentRotation.value = 0;
  mouseVelocityX.value = 0;
  mouseVelocityY.value = 0;
  
  // 添加全局鼠标事件监听
  window.addEventListener('mousemove', onDrag);
  window.addEventListener('mouseup', stopDrag);
  
  // 开始动画循环
  if (animationFrameId.value !== null) {
    cancelAnimationFrame(animationFrameId.value);
  }
  animationFrameId.value = requestAnimationFrame(animateCard);
};

// 鼠标移动时更新位置
const onDrag = (event: MouseEvent) => {
  if (!isDragging.value) return;
  
  // 更新目标偏移量（卡片将缓动到这个位置）
  targetOffsetX.value = event.clientX - dragStartX.value;
  targetOffsetY.value = event.clientY - dragStartY.value;
  
  // 更新鼠标速度（用于旋转效果）
  // 使用movementX/Y更准确，但也可以计算当前与上一次的差值
  mouseVelocityX.value = event.movementX || (event.clientX - lastMouseX.value);
  mouseVelocityY.value = event.movementY || (event.clientY - lastMouseY.value);
  
  // 更新上一次鼠标位置
  lastMouseX.value = event.clientX;
  lastMouseY.value = event.clientY;
  
  // 计算新的插入位置
  updateInsertionPosition(event);
};

// 更新插入指示器位置
const updateInsertionPosition = (event: MouseEvent) => {
  if (!containerRef.value || draggingIndex.value < 0) return;
  
  // 计算相对容器的鼠标位置
  const containerRect = containerRef.value.getBoundingClientRect();
  const relativeX = event.clientX - containerRect.left;
  
  // 计算最近的插入位置
  let newInsertionIndex = Math.floor(relativeX / (CARD_WIDTH + CARD_MARGIN));
  
  // 边界处理
  if (newInsertionIndex < 0) newInsertionIndex = 0;
  if (newInsertionIndex > games.value.length) newInsertionIndex = games.value.length;
  
  // 如果拖拽到自己原来的位置右侧，需要调整索引
  if (newInsertionIndex > draggingIndex.value) newInsertionIndex -= 1;
  
  // 不能插入到自己当前的位置
  if (newInsertionIndex === draggingIndex.value) {
    showInsertionIndicator.value = false;
    return;
  }
  
  // 更新插入位置
  insertionIndex.value = newInsertionIndex >= draggingIndex.value ? 
    newInsertionIndex + 1 : newInsertionIndex;
  showInsertionIndicator.value = true;
};

// 停止拖拽并重新排序
const stopDrag = () => {
  if (!isDragging.value) return;
  
  // 取消拖拽动画帧
  if (animationFrameId.value !== null) {
    cancelAnimationFrame(animationFrameId.value);
    animationFrameId.value = null;
  }
  
  // 保存被拖拽卡片的当前位置和旋转状态
  const draggedCardIndex = draggingIndex.value;
  const draggedCardFinalX = cardPositions[draggedCardIndex].x + dragOffsetX.value;
  const draggedCardFinalY = cardPositions[draggedCardIndex].y + dragOffsetY.value;
  const finalRotation = currentRotation.value;
  
  // 如果有插入指示器，进行排序
  if (showInsertionIndicator.value && insertionIndex.value >= 0) {
    const newGames = [...games.value];
    const draggedItem = newGames.splice(draggedCardIndex, 1)[0];
    
    // 计算正确的插入位置
    let targetIndex = insertionIndex.value;
    if (targetIndex > draggedCardIndex) targetIndex -= 1;
    
    // 插入到新位置
    newGames.splice(targetIndex, 0, draggedItem);
    
    // 记录当前所有卡片的位置，作为动画起点
    const oldPositions = [...cardPositions];
    
    // 更新游戏数据
    games.value = newGames;
    
    // 设置目标位置
    games.value.forEach((_, index) => {
      cardTargetPositions[index] = {
        x: index * (CARD_WIDTH + CARD_MARGIN),
        y: 0
      };
    });
    
    // 根据排序结果，正确设置每张卡片的当前位置（作为动画起点）
    const newPositions: { x: number, y: number }[] = [];
    
    // 创建从新位置到旧位置的映射
    const newToOld = new Map<number, number>();
    
    // 记录被拖拽卡片在旧序列和新序列中的位置
    newToOld.set(targetIndex, draggedCardIndex);
    
    // 从左向右遍历所有卡片，计算非拖拽卡片的新旧位置映射
    let oldIndex = 0;
    let newIndex = 0;
    
    while (oldIndex < oldPositions.length || newIndex < games.value.length) {
      // 跳过拖拽卡片
      if (oldIndex === draggedCardIndex) {
        oldIndex++;
        continue;
      }
      if (newIndex === targetIndex) {
        newIndex++;
        continue;
      }
      
      // 建立映射关系
      if (oldIndex < oldPositions.length && newIndex < games.value.length) {
        newToOld.set(newIndex, oldIndex);
      }
      
      oldIndex++;
      newIndex++;
    }
    
    // 使用映射关系设置每张卡片的初始位置
    for (let i = 0; i < games.value.length; i++) {
      if (i === targetIndex) {
        // 被拖拽的卡片使用最终拖拽位置
        newPositions.push({
          x: draggedCardFinalX,
          y: draggedCardFinalY
        });
        cardRotations[i] = finalRotation; // 使用拖拽结束时的旋转角度
      } else {
        // 其他卡片，根据映射找到原始位置
        const originalIndex = newToOld.get(i);
        
        // 如果找到了映射关系
        if (originalIndex !== undefined && originalIndex >= 0 && originalIndex < oldPositions.length) {
          newPositions.push({
            x: oldPositions[originalIndex].x,
            y: oldPositions[originalIndex].y
          });
          
          // 根据移动方向设置初始旋转
          cardRotations[i] = 0;
        } else {
          // 出现意外情况（不应该发生），使用当前卡片的位置
          console.warn(`无法找到卡片 ${i} 的原始位置`);
          newPositions.push({
            x: i * (CARD_WIDTH + CARD_MARGIN),
            y: 0
          });
          cardRotations[i] = 0;
        }
      }
    }
    
    // 更新卡片位置数组
    cardPositions.length = 0;
    newPositions.forEach(pos => cardPositions.push(pos));
    
    // 开始重排动画
    isRearranging.value = true;
    if (rearrangeAnimationId.value !== null) {
      cancelAnimationFrame(rearrangeAnimationId.value);
    }
    rearrangeAnimationId.value = requestAnimationFrame(animateRearrange);
  } else {
    // 没有排序变化，但仍要添加回原位的动画效果
    
    // 保存当前拖拽卡片的位置作为动画起点
    cardPositions[draggedCardIndex] = {
      x: cardPositions[draggedCardIndex].x + dragOffsetX.value,
      y: cardPositions[draggedCardIndex].y + dragOffsetY.value
    };
    
    // 设置目标位置（回到原来的位置）
    games.value.forEach((_, index) => {
      cardTargetPositions[index] = {
        x: index * (CARD_WIDTH + CARD_MARGIN),
        y: 0
      };
    });
    
    // 设置卡片的旋转状态
    cardRotations[draggedCardIndex] = finalRotation;
    
    // 启动动画，让卡片回到原位
    isRearranging.value = true;
    if (rearrangeAnimationId.value !== null) {
      cancelAnimationFrame(rearrangeAnimationId.value);
    }
    rearrangeAnimationId.value = requestAnimationFrame(animateRearrange);
  }
  
  // 重置拖拽状态
  isDragging.value = false;
  draggingIndex.value = -1;
  showInsertionIndicator.value = false;
  currentRotation.value = 0;
  
  // 移除全局事件监听
  window.removeEventListener('mousemove', onDrag);
  window.removeEventListener('mouseup', stopDrag);
};

// 动画循环函数
const animateCard = () => {
  if (!isDragging.value || draggingIndex.value < 0) return;
  
  // 计算当前位置向目标位置的缓动
  dragOffsetX.value += (targetOffsetX.value - dragOffsetX.value) * DRAG_EASING;
  dragOffsetY.value += (targetOffsetY.value - dragOffsetY.value) * DRAG_EASING;
  
  // 根据鼠标移动速度和方向计算旋转角度
  // 增强旋转效果，使其更加明显
  const targetRotation = mouseVelocityX.value * 0.5 + mouseVelocityY.value * 0.15;
  
  // 旋转角度也使用缓动，但降低缓动系数使旋转更快速响应
  currentRotation.value += (targetRotation - currentRotation.value) * (DRAG_EASING * 1.5);
  
  // 限制最大旋转角度
  currentRotation.value = Math.max(-MAX_DRAG_ROTATION, Math.min(MAX_DRAG_ROTATION, currentRotation.value));
  
  // 继续下一帧动画
  animationFrameId.value = requestAnimationFrame(animateCard);
};

// 卡片重排动画
const animateRearrange = () => {
  if (!isRearranging.value) return;

  let allCardsInPlace = true;
  const threshold = 0.3; // 终止阈值

  // 更新所有卡片的位置
  games.value.forEach((_, index) => {
    // 计算当前位置到目标位置的差值（像拖拽时的鼠标位置一样，目标位置是卡片要追逐的对象）
    const targetX = cardTargetPositions[index]?.x || index * (CARD_WIDTH + CARD_MARGIN);
    const currentX = cardPositions[index]?.x || 0;
    const dx = targetX - currentX;
    
    // 计算Y轴差值
    const targetY = 0;
    const currentY = cardPositions[index]?.y || 0;
    const dy = targetY - currentY;
    
    // 应用缓动
    if (Math.abs(dx) > threshold || Math.abs(dy) > threshold) {
      // 还没有到达目标位置
      allCardsInPlace = false;
      
      // 计算本次移动的距离（像拖拽时一样，使用缓动效果）
      const moveX = dx * REARRANGE_EASING;
      const moveY = dy * REARRANGE_EASING;
      
      // 更新位置
      cardPositions[index].x += moveX;
      cardPositions[index].y += moveY;
      
      // 计算移动速度向量的大小和方向
      const moveSpeed = Math.sqrt(moveX * moveX + moveY * moveY);
      const moveDirection = Math.sign(moveX); // 主要考虑水平方向
      
      // 根据移动速度计算目标旋转角度（与拖拽时类似，速度越快旋转越大）
      // 这种方式更自然，不依赖于初始随机角度，而是根据实际移动决定旋转
      const speedFactor = Math.min(1, moveSpeed / (CARD_WIDTH * 0.05)); // 归一化速度因子
      const targetRotation = moveDirection * MAX_REARRANGE_ROTATION * speedFactor;
      
      // 使用缓动平滑应用旋转
      cardRotations[index] += (targetRotation - cardRotations[index]) * ROTATION_EASING;
      
      // 限制旋转角度范围
      cardRotations[index] = Math.max(-MAX_REARRANGE_ROTATION, Math.min(MAX_REARRANGE_ROTATION, cardRotations[index]));
    } else {
      // 到达目标位置，精确设置位置
      cardPositions[index].x = targetX;
      cardPositions[index].y = targetY;
      
      // 进一步减小旋转角度，逐渐归零（更快地归零，增强视觉效果）
      cardRotations[index] *= 0.8;
      
      // 如果旋转角度很小，直接归零
      if (Math.abs(cardRotations[index]) < 0.1) {
        cardRotations[index] = 0;
      }
    }
  });

  // 如果所有卡片都已到位，结束动画
  if (allCardsInPlace && cardRotations.every(r => Math.abs(r) < 0.5)) {
    // 完成最后的调整
    games.value.forEach((_, index) => {
      cardPositions[index].x = cardTargetPositions[index].x;
      cardPositions[index].y = 0;
      cardRotations[index] = 0;
    });
    
    // 结束动画状态
    isRearranging.value = false;
    rearrangeAnimationId.value = null;
  } else {
    // 继续下一帧动画
    rearrangeAnimationId.value = requestAnimationFrame(animateRearrange);
  }
};

// 组件挂载时初始化
onMounted(() => {
  initCardPositions();
});

// 组件卸载前清理
onBeforeUnmount(() => {
  // 清理所有动画帧
  if (animationFrameId.value !== null) {
    cancelAnimationFrame(animationFrameId.value);
  }
  if (rearrangeAnimationId.value !== null) {
    cancelAnimationFrame(rearrangeAnimationId.value);
  }
  
  // 移除事件监听器
  window.removeEventListener('mousemove', onDrag);
  window.removeEventListener('mouseup', stopDrag);
});
</script>

<style lang="scss" scoped>
.card-container {
  position: relative;
  width: 100%;
  height: 350px; // 卡片高度 + 一些额外空间
  padding: 20px 0;
  overflow: hidden;
}

.card {
  cursor: pointer;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  background-color: #fff;
  overflow: hidden;
  user-select: none;
  perspective: 1000px; // 添加3D视角
  transform-style: preserve-3d; // 保留3D效果
  
  &.dragging {
    cursor: grabbing;
    pointer-events: none;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2); // 增强拖拽时的阴影
  }
  
  .card-image {
    width: 100%;
    height: calc(100% - 40px);
    object-fit: cover;
    display: block;
  }
  
  .card-title {
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    font-weight: bold;
    padding: 8px;
    text-align: center;
    background-color: rgba(255, 255, 255, 0.9);
  }
}

.insertion-indicator {
  position: absolute;
  width: 4px;
  background-color: #3498db;
  border-radius: 2px;
  pointer-events: none;
}
</style>
