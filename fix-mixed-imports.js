#!/usr/bin/env node

/**
 * ‰øÆÂ§çÊ∑∑ÂêàÂØºÂÖ•ÈóÆÈ¢ò
 * Â∞ÜÊûö‰∏æ„ÄÅÂ∏∏ÈáèÁ≠âÂÄºÂØºÂÖ•‰ªé import type ‰∏≠ÂàÜÁ¶ªÂá∫Êù•
 */

import fs from 'fs';

// ÈúÄË¶Å‰øÆÂ§çÁöÑÊñá‰ª∂ÂàóË°®ÔºàÂü∫‰∫éÈîôËØØ‰ø°ÊÅØÔºâ
const filesToFix = [
  'src/services/mod-service/index.ts',
  'src/services/mod-service/mod-operations.ts',
  'src/services/mod-service/mod-state-manager.ts',
  'src/services/plugin-service/plugin-service.ts',
  'src/services/ui-service/index.ts'
];

// Â∑≤Áü•ÁöÑÊûö‰∏æÂíåÂ∏∏ÈáèÔºàÂ∫îËØ•‰Ωú‰∏∫ÂÄºÂØºÂÖ•Ôºâ
const valueImports = [
  'ModStatus',
  'ModServiceEvent',
  'PluginServiceEventType',
  'PluginStatus',
  'UiServiceEvent',
  'ReactiveStore',
  'EventEmitter',
  'updateModStatusEffect',
  'validatePluginInfo',
  'createInitialRouteState',
  'updateRouteState',
  'createInitialNotificationState',
  'addNotificationToState',
  'removeNotificationFromState',
  'createNotificationConfig',
  'validateNotificationConfig',
  'mergeUiServiceConfig'
];

/**
 * Ê£ÄÊü•‰∏Ä‰∏™ÂØºÂÖ•È°πÊòØÂê¶‰∏∫ÂÄºÂØºÂÖ•
 */
function isValueImport(importName) {
  return valueImports.some(pattern => 
    importName.includes(pattern) || 
    importName.endsWith('Status') ||
    importName.endsWith('Event') ||
    importName.endsWith('Type') ||
    importName.endsWith('Store') ||
    importName.endsWith('Emitter') ||
    importName.startsWith('update') ||
    importName.startsWith('create') ||
    importName.startsWith('validate') ||
    importName.startsWith('add') ||
    importName.startsWith('remove') ||
    importName.startsWith('merge')
  );
}

/**
 * ‰øÆÂ§çÂçï‰∏™Êñá‰ª∂ÁöÑÊ∑∑ÂêàÂØºÂÖ•ÈóÆÈ¢ò
 */
function fixFileMixedImports(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // ÂåπÈÖç import type ËØ≠Âè•ÁöÑÊ≠£ÂàôË°®ËææÂºè
    const importTypeRegex = /import\s+type\s*\{\s*([^}]+)\s*\}\s*from\s*['"]([^'"]+)['"];?/g;
    
    const newContent = content.replace(importTypeRegex, (match, imports, fromPath) => {
      const importItems = imports.split(',').map(item => item.trim());
      const typeImports = [];
      const valueImports = [];
      
      importItems.forEach(item => {
        // Â§ÑÁêÜ as ÈáçÂëΩÂêçÁöÑÊÉÖÂÜµ
        const [originalName, alias] = item.split(' as ').map(s => s.trim());
        const displayName = alias || originalName;
        
        if (isValueImport(originalName)) {
          valueImports.push(item);
        } else {
          typeImports.push(item);
        }
      });
      
      if (valueImports.length === 0) {
        return match; // Ê≤°ÊúâÂÄºÂØºÂÖ•Ôºå‰øùÊåÅÂéüÊ†∑
      }
      
      modified = true;
      
      let result = '';
      
      // Â¶ÇÊûúÊúâÂÄºÂØºÂÖ•ÔºåÂÖàËæìÂá∫ÂÄºÂØºÂÖ•
      if (valueImports.length > 0) {
        result += `import { ${valueImports.join(', ')} } from '${fromPath}';\n`;
      }
      
      // ËæìÂá∫Á±ªÂûãÂØºÂÖ•
      if (typeImports.length > 0) {
        result += `import type { ${typeImports.join(', ')} } from '${fromPath}';`;
      }
      
      return result;
    });
    
    if (modified) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`‚úÖ Fixed: ${filePath}`);
      return true;
    } else {
      console.log(`‚è≠Ô∏è  No changes needed: ${filePath}`);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå Error fixing ${filePath}:`, error.message);
    return false;
  }
}

/**
 * ÊµãËØï‰øÆÂ§çÊïàÊûú
 */
function testFix() {
  console.log('üß™ Testing mixed imports fix...');
  
  const testFiles = filesToFix.slice(0, 2); // Âè™ÊµãËØïÂâç2‰∏™Êñá‰ª∂
  let successCount = 0;
  
  testFiles.forEach(file => {
    if (fs.existsSync(file)) {
      const success = fixFileMixedImports(file);
      if (success) successCount++;
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${file}`);
    }
  });
  
  console.log(`\nüìä Test results: ${successCount}/${testFiles.length} files fixed`);
  return successCount > 0;
}

/**
 * Â∫îÁî®‰øÆÂ§çÂà∞ÊâÄÊúâÊñá‰ª∂
 */
function applyFixToAllFiles() {
  console.log('üöÄ Applying mixed imports fix to all files...');
  
  let totalFixed = 0;
  let totalFiles = 0;
  
  filesToFix.forEach(file => {
    if (fs.existsSync(file)) {
      totalFiles++;
      const success = fixFileMixedImports(file);
      if (success) totalFixed++;
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${file}`);
    }
  });
  
  console.log(`\nüìä Final results: ${totalFixed}/${totalFiles} files fixed`);
}

// ‰∏ªÊâßË°åÈÄªËæë
function main() {
  console.log('üîß Mixed Imports Fixer');
  console.log('======================\n');
  
  const args = process.argv.slice(2);
  
  if (args.includes('--test')) {
    testFix();
  } else if (args.includes('--apply')) {
    applyFixToAllFiles();
  } else {
    const testSuccess = testFix();
    
    if (testSuccess) {
      console.log('\n‚úÖ Test successful! Ready to apply to all files.');
      console.log('Run with --apply to fix all files.');
    } else {
      console.log('\n‚ùå Test failed. Please check the issues before applying to all files.');
    }
  }
}

main();
